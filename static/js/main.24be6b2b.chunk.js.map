{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/input-search/input-search.component.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","friendId","friendName","friendEmail","CardList","friends","map","friend","id","name","email","InputSearch","placeholder","handleChange","type","onChange","App","state","inputSearch","event","setState","target","value","fetch","then","response","json","users","this","filteredFriends","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uUAGaA,EAAO,SAAAC,GAAK,OACvB,sBAAKC,UAAU,OAAf,UACE,qBACEC,IAAI,SACJC,IAAG,+BAA4BH,EAAMI,SAAlC,4BACL,6BAAMJ,EAAMK,aACZ,uBACA,4BAAKL,EAAMM,kBCNFC,EAAW,SAAAP,GAAK,OAC3B,qBAAKC,UAAU,YAAf,SAEID,EAAMQ,QAAQC,KAAI,SAAAC,GAAM,OACtB,cAAC,EAAD,CAEEN,SAAWM,EAAOC,GAClBN,WAAaK,EAAOE,KACpBN,YAAcI,EAAOG,OAHfH,EAAOC,UCNVG,G,MAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACzB,uBACEf,UAAU,eACVgB,KAAK,SACLF,YAAcA,EACdG,SAAWF,MCFTG,E,4MACJC,MAAQ,CACNZ,QAAS,CACP,CACEG,GAAI,GACJC,KAAM,KAGVS,YAAa,I,EASfL,aAAe,SAAAM,GACb,EAAKC,SAAS,CAAEF,YAAaC,EAAME,OAAOC,S,uDAP5C,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKP,SAAS,CAAEf,QAASsB,S,oBAO5C,WAAU,IAAD,OACP,EAAiCC,KAAKX,MAA9BZ,EAAR,EAAQA,QAASa,EAAjB,EAAiBA,YACXW,EAAkBxB,EAAQyB,QAAO,SAAAvB,GAAM,OAC3CA,EAAOE,KAAKsB,cAAcC,SAASd,EAAYa,kBAGjD,OACE,sBAAKjC,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACEc,YAAY,iBACZC,aAAe,SAAAM,GAAK,OAAI,EAAKN,aAAaM,MAE5C,cAAC,EAAD,CAAUd,QAAUwB,W,GAlCVI,aAwCHjB,IClCKkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAC+B,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YE/G5BrB,M","file":"static/js/main.24be6b2b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.style.css\";\n\nexport const Card = props => (\n  <div className=\"card\">\n    <img\n      alt=\"friend\"\n      src={ `https://robohash.org/${ props.friendId }?set=set2&size=180x180` } />\n    <h2>{ props.friendName }</h2>\n    <hr />\n    <p>{ props.friendEmail }</p>\n  </div>\n);\n","import React from \"react\";\nimport \"./card-list.style.css\";\nimport { Card } from \"../card/card.component\";\n\nexport const CardList = props => (\n  <div className=\"card-list\">\n    {\n      props.friends.map(friend => (\n        <Card\n          key={ friend.id }\n          friendId={ friend.id }\n          friendName={ friend.name }\n          friendEmail={ friend.email } />\n      ))\n    }\n  </div>\n);\n","import React from \"react\";\nimport \"./input-search.style.css\";\n\nexport const InputSearch = ({ placeholder, handleChange }) => (\n  <input\n    className=\"input-search\"\n    type=\"search\"\n    placeholder={ placeholder }\n    onChange={ handleChange } />\n);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { InputSearch }\n  from \"./components/input-search/input-search.component\";\n\nclass App extends Component {\n  state = {\n    friends: [\n      {\n        id: \"\",\n        name: \"\"\n      }\n    ],\n    inputSearch: \"\"\n  };\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({ friends: users }));\n  }\n\n  handleChange = event => {\n    this.setState({ inputSearch: event.target.value });\n  }\n\n  render() {\n    const { friends, inputSearch } = this.state;\n    const filteredFriends = friends.filter(friend =>\n      friend.name.toLowerCase().includes(inputSearch.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Friendly Robots</h1>\n        <InputSearch\n          placeholder=\"Search Friends\"\n          handleChange={ event => this.handleChange(event) }\n        />\n        <CardList friends={ filteredFriends } />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}